{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-1.4/Archetype/C_REFERENCE_OBJECT.json",
    "title": "C_REFERENCE_OBJECT",
    "description": "Abstract parent type of C_OBJECT subtypes that are defined by reference.",
    "$comments": "Defined in Archetype IM, abstract, inherits from C_OBJECT",
    "type": "object",
    "properties": {
        "_type": {
            "enum": [
                "ARCHETYPE_INTERNAL_REF",
                "ARCHETYPE_SLOT",
                "CONSTRAINT_REF"
            ]
        },
        "rm_type_name": {
            "description": "Reference model type that this node corresponds to. ",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
        },
        "occurrences": {
            "description": "Occurrences of this object node in the data, under the owning attribute. Upper limit can only be greater than 1 if owning attribute has a cardinality of more than 1).",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Interval_of_Integer"
        },
        "node_id": {
            "description": "Semantic identifier of this node, used to dis-tinguish sibling nodes. All nodes must have a node_id; for nodes under a container C_ATTRIBUTE, the id must be an id-code must be defined in the archetype terminolo-gy. For valid structures, all node ids are id-codes.\nFor C_PRIMITIVE_OBJECTs, it will have the special value Primitive_node_id.\n",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
        }
    },
    "required": [
        "_type",
        "rm_type_name",
        "occurrences",
        "node_id"
    ],
    "$abstract": true,
    "$inherits": [
        "all.json#/definitions/C_OBJECT"
    ],
    "$children": [
        "all.json#/definitions/ARCHETYPE_INTERNAL_REF",
        "all.json#/definitions/ARCHETYPE_SLOT",
        "all.json#/definitions/CONSTRAINT_REF"
    ],
    "$functions": {
        "is_subset_of": {
            "description": "True if constraints represented by this node, ignoring any sub-parts, are narrower or the same as other. \nTypically used during validation of special-ised archetype nodes.",
            "parameters": {
                "other": {
                    "$ref": "all.json#/definitions/ARCHETYPE_CONSTRAINT"
                }
            },
            "required_parameters": [
                "other"
            ],
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Boolean"
            }
        },
        "is_valid": {
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Boolean"
            }
        },
        "path": {
            "description": "Path of this node relative to root of archetype.",
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
            }
        },
        "has_path": {
            "description": "True if the relative path a_path exists at this node.",
            "parameters": {
                "a_path": {
                    "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
                }
            },
            "required_parameters": [
                "a_path"
            ],
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Boolean"
            }
        }
    },
    "$invariants": {
        "Post": "Result = soc_parent /= Void or parent.soc_parent /= Void",
        "Path_exists": "path /= Void"
    }
}