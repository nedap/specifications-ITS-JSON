{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.3/Data_types/DV_CODED_TEXT-detailed.json",
    "title": "DV_CODED_TEXT",
    "description": "A text item whose value must be the rubric from a controlled terminology, the key (i.e. the  code') of which is the defining_code attribute. In other words: a DV_CODED_TEXT is a combination of a CODE_PHRASE (effectively a code) and the rubric of that term, from a terminology service, in the language in which the data was authored. \n\nSince DV_CODED_TEXT is a subtype of DV_TEXT, it can be used in place of it, effectively allowing the type DV_TEXT to mean  a text item, which may optionally be coded. \n\nMisuse: If the intention is to represent a term code attached in some way to a fragment of plain text, DV_CODED_TEXT should not be used; instead use a DV_TEXT and a TERM_MAPPING to a CODE_PHRASE. ",
    "$comments": "Defined in Data_types IM, inherits from DV_TEXT",
    "type": "object",
    "properties": {
        "value": {
            "description": "Displayable rendition of the item, regardless of its underlying structure. For DV_CODED_TEXT, this is the rubric of the complete term as provided by the terminology service. No carriage returns, line feeds, or other non-printing characters permitted. ",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.3/Base_types/all-detailed.json#/definitions/String"
        },
        "hyperlink": {
            "description": "Optional link sitting behind a section of plain text or coded term item. ",
            "$ref": "all-detailed.json#/definitions/DV_URI"
        },
        "formatting": {
            "description": "A format string of the form  name:value; name:value... , e.g. \"font-weight : bold; font-family : Arial; font-size : 12pt;\". \n\nValues taken from W3C CSS2 properties lists  back-ground  and  font . ",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.3/Base_types/all-detailed.json#/definitions/String"
        },
        "mappings": {
            "description": "Terms from other terminologies most closely matching this term, typically used where the originator (e.g. pathology lab) of information uses a local terminology but also supplies one or more equivalents from well known terminologies (e.g. LOINC). \n",
            "type": "array",
            "items": {
                "$ref": "all-detailed.json#/definitions/TERM_MAPPING"
            }
        },
        "language": {
            "description": "Optional indicator of the localised language in which the value is written. Coded from openEHR Code Set  languages . Only used when either the text object is in a different language from the enclosing ENTRY, or else the text object is being used outside of an ENTRY or other enclosing structure which indicates the language. ",
            "$ref": "all-detailed.json#/definitions/CODE_PHRASE"
        },
        "encoding": {
            "description": "Name of character encoding scheme in which this value is encoded. Coded from openEHR Code Set  character sets . Unicode is the default assumption in openEHR, with UTF-8 being the assumed encoding. This attribute allows for variations from these assumptions. \n",
            "$ref": "all-detailed.json#/definitions/CODE_PHRASE"
        },
        "defining_code": {
            "description": "The term which the  value' attribute is the textual rendition (i.e. rubric) of. \n",
            "$ref": "all-detailed.json#/definitions/CODE_PHRASE"
        }
    },
    "required": [
        "value",
        "defining_code"
    ],
    "$inherits": [
        "all-detailed.json#/definitions/DV_TEXT"
    ],
    "$invariants": {
        "Valid_value": "not value.is_empty and then not (value.has(CR) or value.has(LF))",
        "Language_valid": "language /= Void implies code_set (Code_set_id_languages).has_code (language)",
        "Encoding_valid": "encoding /= Void implies code_set (Code_set_id_character_sets).has_code (encoding)",
        "Mappings_valid": "mappings /= void implies not mappings.is_empty",
        "Formatting_valid": "formatting /= void implies not formatting.is_empty"
    }
}