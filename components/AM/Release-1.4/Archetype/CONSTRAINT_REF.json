{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-1.4/Archetype/CONSTRAINT_REF.json",
    "title": "CONSTRAINT_REF",
    "description": "Reference to a constraint described in the same archetype, but outside the main constraint structure. This is used to refer to constraints expressed in terms of external resources, such as constraints on terminology value sets.",
    "$comments": "Defined in Archetype IM, inherits from C_REFERENCE_OBJECT",
    "type": "object",
    "properties": {
        "rm_type_name": {
            "description": "Reference model type that this node corresponds to. ",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
        },
        "occurrences": {
            "description": "Occurrences of this object node in the data, under the owning attribute. Upper limit can only be greater than 1 if owning attribute has a cardinality of more than 1).",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Interval_of_Integer"
        },
        "node_id": {
            "description": "Semantic identifier of this node, used to dis-tinguish sibling nodes. All nodes must have a node_id; for nodes under a container C_ATTRIBUTE, the id must be an id-code must be defined in the archetype terminolo-gy. For valid structures, all node ids are id-codes.\nFor C_PRIMITIVE_OBJECTs, it will have the special value Primitive_node_id.\n",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
        },
        "reference": {
            "description": "Reference to a constraint in the archetype local ontology.",
            "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
        }
    },
    "required": [
        "rm_type_name",
        "occurrences",
        "node_id",
        "reference"
    ],
    "$inherits": [
        "all.json#/definitions/C_REFERENCE_OBJECT"
    ],
    "$functions": {
        "is_subset_of": {
            "description": "True if constraints represented by this node, ignoring any sub-parts, are narrower or the same as other. \nTypically used during validation of special-ised archetype nodes.",
            "parameters": {
                "other": {
                    "$ref": "all.json#/definitions/ARCHETYPE_CONSTRAINT"
                }
            },
            "required_parameters": [
                "other"
            ],
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Boolean"
            }
        },
        "is_valid": {
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Boolean"
            }
        },
        "path": {
            "description": "Path of this node relative to root of archetype.",
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
            }
        },
        "has_path": {
            "description": "True if the relative path a_path exists at this node.",
            "parameters": {
                "a_path": {
                    "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/String"
                }
            },
            "required_parameters": [
                "a_path"
            ],
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.2/Foundation_types/all.json#/definitions/Boolean"
            }
        }
    },
    "$invariants": {
        "Post": "Result = soc_parent /= Void or parent.soc_parent /= Void",
        "Path_exists": "path /= Void",
        "Consistency": "not any_allowed"
    }
}