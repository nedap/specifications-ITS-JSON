{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-1.4/Archetype/C_DATE_TIME-detailed.json",
    "title": "C_DATE_TIME",
    "description": "ISO 8601-compatible constraint on instances of Date_Time. There is no validity flag for \u2018year\u2019, since it must always be by definition mandatory in order to have a sensible date/time at all. Syntax expressions of instances of this class include \u201cYYYY-MM-DDT??:??:??\u201d (date/time with optional time) and \u201cYYYY-MMDDTHH:MM:xx\u201d (date/time, seconds not allowed).",
    "$comments": "Defined in Archetype IM, inherits from C_PRIMITIVE",
    "type": "object",
    "properties": {
        "assumed_value": {
            "description": "The value to assume if this item is not included in data, due to being part of an optional structure."
        },
        "month_validity": {
            "description": "Validity of month in constrained date."
        },
        "day_validity": {
            "description": "Validity of day in constrained date."
        },
        "hour_validity": {
            "description": "Validity of hour in constrained time."
        },
        "minute_validity": {
            "description": "Validity of minute in constrained time."
        },
        "second_validity": {
            "description": "Validity of second in constrained time."
        },
        "millisecond_valdity": {
            "description": "Validity of millisecond in constrained time."
        },
        "timezone_valdity": {
            "description": "Validity of timezone in constrained date."
        },
        "range": {
            "description": "Range of Date_times specifying constraint."
        }
    },
    "$inherits": [
        "all-detailed.json#/definitions/C_PRIMITIVE"
    ],
    "$functions": {
        "default_value": {
            "description": "Generate a default value from this constraint object.",
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.3/Base_types/all-detailed.json#/definitions/Any"
            }
        },
        "has_assumed_value": {
            "description": "True if there is an assumed value.",
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.3/Base_types/all-detailed.json#/definitions/Boolean"
            }
        },
        "valid_value": {
            "description": "True if a_value is valid with respect to constraint expressed in concrete instance of this type.",
            "parameters": {
                "a_value": {
                    "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.3/Base_types/all-detailed.json#/definitions/Any"
                }
            },
            "required_parameters": [
                "a_value"
            ],
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.3/Base_types/all-detailed.json#/definitions/Boolean"
            }
        },
        "validity_is_range": {
            "description": "True if validity is in the form of a range; useful for developers to check which kind of constraint has been set.",
            "return": {
                "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.0.3/Base_types/all-detailed.json#/definitions/Boolean"
            }
        }
    },
    "$invariants": {
        "Assumed_value_valid": "has_assumed_value implies valid_value(assumed_value)",
        "Pattern_validity": "pattern /= Void implies valid_iso8601_date_time_constraint_pattern(pattern)",
        "Month_validity_optional:": "month_validity = {VALIDITY_KIND}.optional implies (day_validity = {VALIDITY_KIND}.optional or day_validity = {VALIDITY_KIND}.disallowed)",
        "Month_validity_disallowed": "month_validity = {VALIDITY_KIND}.disallowed implies day_validity = {VALIDITY_KIND}.disallowed",
        "Day_validity_optional": "day_validity = {VALIDITY_KIND}.optional implies (hour_validity = {VALIDITY_KIND}.optional or hour_validity = {VALIDITY_KIND}.disallowed)",
        "Day_validity_disallowed": "day_validity = {VALIDITY_KIND}.disallowed implies hour_validity = {VALIDITY_KIND}.disallowed",
        "Hour_validity_optional": "hour_validity = {VALIDITY_KIND}.optional implies (minute_validity = {VALIDITY_KIND}.optional or minute_validity = {VALIDITY_KIND}.disallowed)",
        "Hour_validity_disallowed": "hour_validity = {VALIDITY_KIND}.disallowed implies minute_validity = {VALIDITY_KIND}.disallowed",
        "Minute_validity_optional": "minute_validity = {VALIDITY_KIND}.optional implies (second_validity = {VALIDITY_KIND}.optional or second_validity = {VALIDITY_KIND}.disallowed)",
        "Minute_validity_disallowed": "minute_validity = {VALIDITY_KIND}.disallowed implies second_validity = {VALIDITY_KIND}.disallowed",
        "Second_validity_optional": "second_validity = {VALIDITY_KIND}.optional implies (millisecond_validity = {VALIDITY_KIND}.optional or millisecond_validity = {VALIDITY_KIND}.disallowed)",
        "Second_validity_disallowed": "second_validity = {VALIDITY_KIND}.disallowed implies millisecond_validity = {VALIDITY_KIND}.disallowed",
        "Validity_is_range": "validity_is_range = (range /= Void)"
    }
}