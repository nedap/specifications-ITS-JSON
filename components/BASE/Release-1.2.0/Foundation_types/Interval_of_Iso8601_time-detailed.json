{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.2.0/Foundation_types/Interval_of_Iso8601_time-detailed.json",
    "title": "Interval<Iso8601_time>",
    "$comments": "Defined in Foundation_types IM, inherits from Interval",
    "type": "object",
    "properties": {
        "lower": {
            "description": "Lower bound.",
            "$ref": "all-detailed.json#/definitions/Iso8601_time"
        },
        "upper": {
            "description": "Upper bound.",
            "$ref": "all-detailed.json#/definitions/Iso8601_time"
        },
        "lower_unbounded": {
            "description": "`lower` boundary open (i.e. = -infinity).",
            "$ref": "all-detailed.json#/definitions/Boolean"
        },
        "upper_unbounded": {
            "description": "`upper` boundary open (i.e. = +infinity).",
            "$ref": "all-detailed.json#/definitions/Boolean"
        },
        "lower_included": {
            "description": "`lower` boundary value included in range if not `lower_unbounded`.",
            "$ref": "all-detailed.json#/definitions/Boolean"
        },
        "upper_included": {
            "description": "`upper` boundary value included in range if not `upper_unbounded`.",
            "$ref": "all-detailed.json#/definitions/Boolean"
        }
    },
    "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
    ],
    "$inherits": [
        "all-detailed.json#/definitions/Interval"
    ],
    "$functions": {
        "has": {
            "description": "True if the value `e` is properly contained in this Interval.",
            "parameters": {
                "e": {
                    "$ref": "all-detailed.json#/definitions/T"
                }
            },
            "required_parameters": [
                "e"
            ],
            "return": {
                "$ref": "all-detailed.json#/definitions/Boolean"
            }
        },
        "intersects": {
            "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
            "parameters": {
                "other": {
                    "$ref": "all-detailed.json#/definitions/Interval"
                }
            },
            "required_parameters": [
                "other"
            ],
            "return": {
                "$ref": "all-detailed.json#/definitions/Boolean"
            }
        },
        "contains": {
            "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
            "parameters": {
                "other": {
                    "$ref": "all-detailed.json#/definitions/Interval"
                }
            },
            "required_parameters": [
                "other"
            ],
            "return": {
                "$ref": "all-detailed.json#/definitions/Boolean"
            }
        },
        "is_equal": {
            "description": "True if current object's interval is semantically same as `_other_`.",
            "parameters": {
                "other": {
                    "$ref": "all-detailed.json#/definitions/Any"
                }
            },
            "required_parameters": [
                "other"
            ],
            "return": {
                "$ref": "all-detailed.json#/definitions/Boolean"
            }
        }
    },
    "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
        "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
    }
}