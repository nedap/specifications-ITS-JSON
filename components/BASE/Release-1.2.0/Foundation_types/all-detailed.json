{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.2.0/Foundation_types/all-detailed.json",
    "title": "Foundation_types IM definitions",
    "description": "The openEHR Base types.",
    "$comments": "Part of BASE component, Release-1.2.0 version.",
    "definitions": {
        "T": {
            "title": "T",
            "description": "Type used by generic parameters.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "$abstract": true
        },
        "K": {
            "title": "K",
            "description": "Type used by generic parameters.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "$abstract": true
        },
        "V": {
            "title": "V",
            "description": "Type used by generic parameters.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "$abstract": true
        },
        "Hash": {
            "title": "Hash",
            "description": "Type representing a keyed table of values. V is the value type, and K the type of the keys. ",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Hash",
                        "Hash<String, Hash<String, Hash<String, String>>>",
                        "Hash<String, Hash<String, String>>",
                        "Hash<String, String>",
                        "Hash<String, List<String>>",
                        "Hash<String, TRANSLATION_DETAILS>",
                        "Hash<String, RESOURCE_DESCRIPTION_ITEM>"
                    ]
                }
            },
            "$inherits": [
                "#/definitions/Container"
            ],
            "$children": [
                "#/definitions/Hash_of_String_Hash_of_String_Hash_of_String_String",
                "#/definitions/Hash_of_String_Hash_of_String_String",
                "#/definitions/Hash_of_String_String",
                "#/definitions/Hash_of_String_List_of_String",
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.2.0/Resource/all-detailed.json#/definitions/Hash_of_String_TRANSLATION_DETAILS",
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.2.0/Resource/all-detailed.json#/definitions/Hash_of_String_RESOURCE_DESCRIPTION_ITEM"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "has_key": {
                    "description": "Test for presence of `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "item": {
                    "description": "Return item for key `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/V"
                    }
                }
            }
        },
        "Hash<String, Hash<String, Hash<String, String>>>": {
            "title": "Hash<String, Hash<String, Hash<String, String>>>",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "has_key": {
                    "description": "Test for presence of `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "item": {
                    "description": "Return item for key `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/V"
                    }
                }
            }
        },
        "Hash<String, Hash<String, String>>": {
            "title": "Hash<String, Hash<String, String>>",
            "description": "Two-level hash map structure, typically used for two levels of keyed tables, e.g. with outer keys = language (\"en\", \"zh\" etc) and inner keys = some tag or id or path.",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "has_key": {
                    "description": "Test for presence of `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "item": {
                    "description": "Return item for key `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/V"
                    }
                }
            }
        },
        "Hash<String, String>": {
            "title": "Hash<String, String>",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "has_key": {
                    "description": "Test for presence of `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "item": {
                    "description": "Return item for key `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/V"
                    }
                }
            }
        },
        "Container": {
            "title": "Container",
            "description": "Abstract ancestor of container types whose items are addressable in some way.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "array",
            "properties": {
                "_type": {
                    "enum": [
                        "Hash",
                        "List",
                        "Set",
                        "Array",
                        "Container<Numeric>",
                        "Hash<String, Hash<String, Hash<String, String>>>",
                        "Hash<String, Hash<String, String>>",
                        "Hash<String, String>",
                        "Hash<String, List<String>>",
                        "Hash<String, TRANSLATION_DETAILS>",
                        "Hash<String, RESOURCE_DESCRIPTION_ITEM>",
                        "List<String>",
                        "Set<String>"
                    ]
                }
            },
            "required": [
                "_type"
            ],
            "$abstract": true,
            "$children": [
                "#/definitions/Hash",
                "#/definitions/List",
                "#/definitions/Set",
                "#/definitions/Array",
                "#/definitions/Container_of_Numeric"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                }
            }
        },
        "List": {
            "title": "List",
            "description": "Ordered container that may contain duplicates.",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "array",
            "properties": {
                "_type": {
                    "enum": [
                        "List",
                        "List<String>"
                    ]
                }
            },
            "$inherits": [
                "#/definitions/Container"
            ],
            "$children": [
                "#/definitions/List_of_String"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "first": {
                    "description": "Return first element.",
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "last": {
                    "description": "Return last element.",
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                }
            },
            "$invariants": {
                "First_validity": "not is_empty implies first /= Void",
                "Last_validity": "not is_empty implies last /= Void"
            }
        },
        "Set": {
            "title": "Set",
            "description": "Unordered container that may not contain duplicates.",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "array",
            "properties": {
                "_type": {
                    "enum": [
                        "Set",
                        "Set<String>"
                    ]
                }
            },
            "$inherits": [
                "#/definitions/Container"
            ],
            "$children": [
                "#/definitions/Set_of_String"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                }
            }
        },
        "Array": {
            "title": "Array",
            "description": "Container whose storage is assumed to be contiguous.",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "array",
            "$inherits": [
                "#/definitions/Container"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "item": {
                    "description": "Return item for key  `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                }
            }
        },
        "Set<String>": {
            "title": "Set<String>",
            "$comments": "Defined in Foundation_types IM, inherits from Set",
            "type": "array",
            "$inherits": [
                "#/definitions/Set"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                }
            }
        },
        "List<String>": {
            "title": "List<String>",
            "$comments": "Defined in Foundation_types IM, inherits from List",
            "type": "array",
            "$inherits": [
                "#/definitions/List"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "first": {
                    "description": "Return first element.",
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "last": {
                    "description": "Return last element.",
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                }
            },
            "$invariants": {
                "First_validity": "not is_empty implies first /= Void",
                "Last_validity": "not is_empty implies last /= Void"
            }
        },
        "Hash<String, List<String>>": {
            "title": "Hash<String, List<String>>",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                },
                "has_key": {
                    "description": "Test for presence of `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "item": {
                    "description": "Return item for key `_a_key_`.",
                    "parameters": {
                        "a_key": {
                            "$ref": "#/definitions/K"
                        }
                    },
                    "required_parameters": [
                        "a_key"
                    ],
                    "return": {
                        "$ref": "#/definitions/V"
                    }
                }
            }
        },
        "Hash<String, Any>": {
            "title": "Hash<String, Any>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Container<Numeric>": {
            "title": "Container<Numeric>",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "object",
            "$inherits": [
                "#/definitions/Container"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value.",
                    "parameters": {
                        "v": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "v"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "count": {
                    "description": "Number of items in container.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_empty": {
                    "description": "True if container is empty.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "there_exists": {
                    "description": "Existential quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "for_all": {
                    "description": "Universal quantifier applied to container, taking one agent argument `_test_` whose signature is `(v:T): Boolean`.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "matching": {
                    "description": "Return a List all items matching the predicate function `_test_` which has signature `(v:T): Boolean`. If no matches, an empty List is returned.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/T"
                        }
                    }
                },
                "select": {
                    "description": "Return first item matching the predicate function `_test_` which has signature `(v:T): Boolean`, or Void if no match.",
                    "parameters": {
                        "test": []
                    },
                    "required_parameters": [
                        "test"
                    ],
                    "return": {
                        "$ref": "#/definitions/T"
                    }
                }
            }
        },
        "Uri": {
            "title": "Uri",
            "description": "A kind of String constrained to obey the syntax of RFC 3986.",
            "$comments": "Defined in Foundation_types IM, inherits from String",
            "type": "string",
            "$inherits": [
                "#/definitions/String"
            ],
            "$functions": {
                "less_than": {
                    "description": "Lexical comparison of string content based on ordering in relevant character set.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_empty": {
                    "description": "True if string is empty, i.e. equal to \"\".",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_integer": {
                    "description": "True if string can be parsed as an integer.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "as_integer": {
                    "description": "Return the integer corresponding to the integer value represented in this string.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "append": {
                    "description": "Concatenation operator - causes `_other_` to be appended to this string.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                },
                "contains": {
                    "description": "Return True if this String contains `_other_` (case-sensitive).",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Comparable": {
            "title": "Comparable",
            "$comments": "Defined in Foundation_types IM, abstract",
            "$abstract": true
        },
        "Ordered_Numeric": {
            "title": "Ordered_Numeric",
            "description": "Abstract notional parent class of ordered, numeric types, which are types with both the `_less_than_()` and arithmetic functions defined.",
            "$comments": "Defined in Foundation_types IM, abstract, inherits from Ordered, Numeric",
            "type": "number",
            "properties": {
                "_type": {
                    "enum": [
                        "Integer",
                        "Double",
                        "Real",
                        "Integer64"
                    ]
                }
            },
            "required": [
                "_type"
            ],
            "$abstract": true,
            "$inherits": [
                "#/definitions/Ordered",
                "#/definitions/Numeric"
            ],
            "$children": [
                "#/definitions/Integer",
                "#/definitions/Double",
                "#/definitions/Real",
                "#/definitions/Integer64"
            ],
            "$functions": {
                "add": {
                    "description": "Sum with `_other_` (commutative). Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "subtract": {
                    "description": "Result of subtracting `_other_`. Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "multiply": {
                    "description": "Product by `_other_`. Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "divide": {
                    "description": "Divide by`_other_`. Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "exponent": {
                    "description": "Expontiation of this by `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "negative": {
                    "description": "Generate negative of current value.",
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Integer": {
            "title": "Integer",
            "description": "Type representing minimal interface of built-in Integer type.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "integer",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "add": {
                    "description": "Integer addition.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "subtract": {
                    "description": "Integer subtraction.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "multiply": {
                    "description": "Integer multiplication.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "divide": {
                    "description": "Integer division.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "exponent": {
                    "description": "Integer exponentiation.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "negative": {
                    "description": "Generate negative of current Integer value.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "less_than": {
                    "description": "Returns True if current Integer is less than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "modulo": {
                    "description": "Return self modulo other.",
                    "parameters": {
                        "mod": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "mod"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_equal": {
                    "description": "Value equality: return True if `this` and `_other_` are attached to objects considered to be equal in value.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "equal": {
                    "description": "Reference equality for reference types, value equality for value types.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Double": {
            "title": "Double",
            "description": "Type used to represent double-precision decimal numbers. Corresponds to a double-precision floating point value in most languages.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "number",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "add": {
                    "description": "Double-precision real number addition.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "subtract": {
                    "description": "Double-precision real number subtraction.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "multiply": {
                    "description": "Double-precision real number multiplication.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "divide": {
                    "description": "Double-precision real number division.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "exponent": {
                    "description": "Double-precision real number exponentiation.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "negative": {
                    "description": "Generate negative of current Double value.",
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "less_than": {
                    "description": "Returns True if current Double is less than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "floor": {
                    "description": "Return the greatest integer no greater than the value of this object.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_equal": {
                    "description": "Value equality: return True if `this` and `_other_` are attached to objects considered to be equal in value.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "equal": {
                    "description": "Reference equality for reference types, value equality for value types.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Numeric": {
            "title": "Numeric",
            "description": "Abstract parent class of numeric types, which are types which have various arithmetic and comparison operators defined.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "number",
            "properties": {
                "_type": {
                    "enum": [
                        "Integer",
                        "Double",
                        "Real",
                        "Integer64"
                    ]
                }
            },
            "required": [
                "_type"
            ],
            "$abstract": true,
            "$children": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "add": {
                    "description": "Sum with `_other_` (commutative). Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "subtract": {
                    "description": "Result of subtracting `_other_`. Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "multiply": {
                    "description": "Product by `_other_`. Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "divide": {
                    "description": "Divide by`_other_`. Actual type of result depends on arithmetic balancing rules.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "exponent": {
                    "description": "Expontiation of this by `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Numeric"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                },
                "negative": {
                    "description": "Generate negative of current value.",
                    "return": {
                        "$ref": "#/definitions/Numeric"
                    }
                }
            }
        },
        "Octet": {
            "title": "Octet",
            "description": "Type representing minimal interface of built-in Octet type.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered",
            "type": "integer",
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$functions": {
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Character": {
            "title": "Character",
            "description": "Type representing minimal interface of built-in Character type.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered",
            "type": "string",
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$functions": {
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Boolean": {
            "title": "Boolean",
            "description": "Type representing minimal interface of built-in Boolean type.",
            "$comments": "Defined in Foundation_types IM",
            "type": "boolean",
            "$functions": {
                "conjunction": {
                    "description": "Logical conjunction of this with `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Boolean"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "semistrict_conjunction": {
                    "description": "Boolean semi-strict conjunction with `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Boolean"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "disjunction": {
                    "description": "Boolean disjunction with `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Boolean"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "semistrict_disjunction": {
                    "description": "Boolean semi-strict disjunction with `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Boolean"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "exclusive_disjunction": {
                    "description": "Boolean exclusive or with `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Boolean"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "implication": {
                    "description": "Boolean implication of `_other_` (semi-strict)",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Boolean"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "negation": {
                    "description": "Boolean negation of the current value.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Involutive_negation": "is_equal (not (not self))",
                "Non_contradiction": "not (self and (not self))",
                "Completeness": "self or else (not self)",
                "Post_de_Morgan": "Result = not (not self and then not other)",
                "Post_commutative": "Result = (other or Current)",
                "Post_consistent_with_semi_strict": "Result implies (self or else other)",
                "Post_definition": "Result = (not self or else other)"
            }
        },
        "String": {
            "title": "String",
            "description": "Type representing minimal interface of built-in String type, as used to represent textual data in any natural or formal language.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered",
            "type": "string",
            "properties": {
                "_type": {
                    "enum": [
                        "String",
                        "Uri"
                    ]
                }
            },
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$children": [
                "#/definitions/Uri"
            ],
            "$functions": {
                "less_than": {
                    "description": "Lexical comparison of string content based on ordering in relevant character set.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_empty": {
                    "description": "True if string is empty, i.e. equal to \"\".",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_integer": {
                    "description": "True if string can be parsed as an integer.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "as_integer": {
                    "description": "Return the integer corresponding to the integer value represented in this string.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "append": {
                    "description": "Concatenation operator - causes `_other_` to be appended to this string.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                },
                "contains": {
                    "description": "Return True if this String contains `_other_` (case-sensitive).",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Real": {
            "title": "Real",
            "description": "Type used to represent decimal numbers. Corresponds to a single-precision floating point value in most languages.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "number",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "add": {
                    "description": "Real number addition.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "subtract": {
                    "description": "Real number subtraction.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "multiply": {
                    "description": "Real number multiplication.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "divide": {
                    "description": "Real number division.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "exponent": {
                    "description": "Real number exponentiation.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "negative": {
                    "description": "Generate negative of current Real value.",
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "less_than": {
                    "description": "Returns True if current Real is less than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "floor": {
                    "description": "Return the greatest integer no greater than the value of this object.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_equal": {
                    "description": "Value equality: return True if `this` and `_other_` are attached to objects considered to be equal in value.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "equal": {
                    "description": "Reference equality for reference types, value equality for value types.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Integer64": {
            "title": "Integer64",
            "description": "Type representing minimal interface of built-in Integer64 type.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "integer",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "add": {
                    "description": "Large integer addition.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer64"
                    }
                },
                "subtract": {
                    "description": "Large integer subtraction.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer64"
                    }
                },
                "multiply": {
                    "description": "Large integer multiplication.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer64"
                    }
                },
                "divide": {
                    "description": "Large integer division.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "exponent": {
                    "description": "Large integer exponentiation.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Double"
                    }
                },
                "negative": {
                    "description": "Generate negative of current Integer value.",
                    "return": {
                        "$ref": "#/definitions/Integer64"
                    }
                },
                "less_than": {
                    "description": "Returns True if current Integer is less than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Integer64"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "modulo": {
                    "description": "Large integer modulus.",
                    "parameters": {
                        "mod": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "mod"
                    ],
                    "return": {
                        "$ref": "#/definitions/Integer64"
                    }
                },
                "is_equal": {
                    "description": "Value equality: return True if `this` and `_other_` are attached to objects considered to be equal in value.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Integer64"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "equal": {
                    "description": "Reference equality for reference types, value equality for value types.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Integer64"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Ordered": {
            "title": "Ordered",
            "description": "Abstract parent class of ordered types i.e. types on which the '<' operator is defined.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "properties": {
                "_type": {
                    "enum": [
                        "Octet",
                        "Character",
                        "String",
                        "DV_ORDINAL",
                        "DV_SCALE",
                        "DV_PROPORTION",
                        "DV_QUANTITY",
                        "DV_COUNT",
                        "DV_DURATION",
                        "DV_DATE",
                        "DV_TIME",
                        "DV_DATE_TIME",
                        "Integer",
                        "Double",
                        "Real",
                        "Integer64",
                        "Uri",
                        "Iso8601_date_time",
                        "Iso8601_duration",
                        "Iso8601_time",
                        "Iso8601_timezone",
                        "Iso8601_date"
                    ]
                }
            },
            "required": [
                "_type"
            ],
            "$abstract": true,
            "$children": [
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.1.0/Data_types/all-detailed.json#/definitions/DV_ORDERED",
                "#/definitions/Ordered_Numeric",
                "#/definitions/Octet",
                "#/definitions/Character",
                "#/definitions/String",
                "#/definitions/Temporal"
            ],
            "$functions": {
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Any": {
            "title": "Any",
            "description": "Abstract ancestor class for all other classes. Usually maps to a type like `Any` or `Object` in an object-oriented technology. Defined here to provide value and reference equality semantics.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "$abstract": true,
            "$functions": {
                "is_equal": {
                    "description": "Value equality: return True if `this` and `_other_` are attached to objects considered to be equal in value.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "equal": {
                    "description": "Reference equality for reference types, value equality for value types.",
                    "parameters": {
                        "other": {
                            "description": "Other object for comparison.",
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "instance_of": {
                    "description": "Create new instance of a type.",
                    "parameters": {
                        "a_type": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "a_type"
                    ],
                    "return": {
                        "$ref": "#/definitions/Any"
                    }
                },
                "type_of": {
                    "description": "Type name of an object as a string. May include generic parameters, as in `\"Interval<Time>\"`.",
                    "parameters": {
                        "an_object": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "an_object"
                    ],
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                },
                "not_equal": {
                    "description": "True if current object not equal to `_other_`. Returns not `_equal_()`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            }
        },
        "Iso8601_date_time": {
            "title": "Iso8601_date_time",
            "description": "Represents an ISO 8601 date/time, including partial and extended forms. Value may be:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)sss][Z | \u00b1hh[:mm]]` (extended, preferred) or\n* `YYYYMMDDThhmmss[(,|.)sss][Z | \u00b1hh[mm]]` (compact)\n* or a partial variant.\n\nSee `_valid_iso8601_date_time()_` for validity.\n\nNote that this class includes 2 deviations from ISO 8601:2004:\n\n* for partial date/times, any part of the date/time up to the month may be missing, not just seconds and minutes as in the standard;\n* the time `24:00:00` is not allowed, since it would mean the date was really on the next day.",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Iso8601_date_time",
                        "DV_DATE_TIME"
                    ]
                },
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$children": [
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.1.0/Data_types/all-detailed.json#/definitions/DV_DATE_TIME"
            ],
            "$functions": {
                "valid_year": {
                    "description": "True if `y >= 0`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_month": {
                    "description": "True if `m >= 1 and m <= months_in_year`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_day": {
                    "description": "True if `d >= 1 and d <= days_in_month (m, y)`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "d": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y",
                        "m",
                        "d"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_hour": {
                    "description": "True if `(h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)` .",
                    "parameters": {
                        "h": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "h",
                        "m",
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_minute": {
                    "description": "True if `m >= 0 and m < Minutes_in_hour`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_second": {
                    "description": "True if `s >= 0 and s < Seconds_in_minute` .",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_fractional_second": {
                    "description": "True if `fs >= 0.0` and `fs < 1.0` .",
                    "parameters": {
                        "fs": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "fs"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or `\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. `nnW` represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                    "parameters": {
                        "s": {
                            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_partial": {
                    "description": "True if this date time is partial, i.e. if seconds or more is missing.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_extended": {
                    "description": "True if this date/time uses `'-'`, `':'` separators.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "year": {
                    "description": "Extract the year part of the date as an Integer.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "month": {
                    "description": "Extract the month part of the date/time as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "day": {
                    "description": "Extract the day part of the date/time as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "hour": {
                    "description": "Extract the hour part of the date/time as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "minute": {
                    "description": "Extract the minute part of the date/time as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "second": {
                    "description": "Extract the integral seconds part of the date/time (i.e. prior to any decimal sign) as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "fractional_second": {
                    "description": "Extract the fractional seconds part of the date/time (i.e. following to any decimal sign) as a Real, or return 0.0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "timezone": {
                    "description": "Timezone; may be Void.",
                    "return": {
                        "$ref": "#/definitions/Iso8601_timezone"
                    }
                },
                "month_unknown": {
                    "description": "Indicates whether month in year is unknown.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "day_unknown": {
                    "description": "Indicates whether day in month is unknown.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "minute_unknown": {
                    "description": "Indicates whether minute in hour is known.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "second_unknown": {
                    "description": "Indicates whether minute in hour is known.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_decimal_sign_comma": {
                    "description": "True if this time has a decimal part indicated by `','` (comma) rather than `'.'` (period).",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "has_fractional_second": {
                    "description": "True if the `_fractional_second_` part is significant (i.e. even if = 0.0).",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "as_string": {
                    "description": "Return the string value in extended format.",
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                },
                "add": {
                    "description": "Arithmetic addition of a duration to a date/time.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date_time"
                    }
                },
                "subtract": {
                    "description": "Arithmetic subtraction of a duration from a date/time.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date_time"
                    }
                },
                "diff": {
                    "description": "Difference of two date/times.",
                    "parameters": {
                        "a_date_time": {
                            "$ref": "#/definitions/Iso8601_date_time"
                        }
                    },
                    "required_parameters": [
                        "a_date_time"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                },
                "add_nominal": {
                    "description": "Addition of nominal duration represented by `_a_diff_`. See `Iso8601_date._add_nominal_()` for semantics.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date"
                    }
                },
                "subtract_nominal": {
                    "description": "Subtraction of nominal duration represented by `_a_diff_`. See `_add_nominal_()` for semantics.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date"
                    }
                }
            },
            "$invariants": {
                "Post": "Result = fs >= 0.0 and fs < 1.0",
                "Post_result": "Result = (other <= self)",
                "Year_valid": "valid_year (year)",
                "Month_valid": "valid_month (month)",
                "Day_valid": "valid_day(year, month, day)",
                "Hour_valid": "valid_hour (hour, minute, second)",
                "Minute_valid": "not minute_unknown implies valid_minute(minute)",
                "Second_valid": "not second_unknown implies valid_second (second)",
                "Fractional_second_valid": "has_fractional_second implies (not second_unknown and valid_fractional_second (fractional_second))",
                "Partial_validity_year": "not month_unknown",
                "Partial_validity_month": "not month_unknown",
                "Partial_validity_day": "not day_unknown",
                "Partial_validity_hour": "not hour_unknown",
                "Partial_validity_minute": "minute_unknown implies second_unknown",
                "Pre": "not second_unknown"
            }
        },
        "Iso8601_duration": {
            "title": "Iso8601_duration",
            "description": "Represents an ISO 8601 duration, which may have multiple parts from years down to seconds. The `_value_` attribute is a String in the format:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nNOTE: two deviations from ISO 8601 are supported, the first, to allow a negative sign, and the second allowing the 'W' designator to be mixed with other designators.",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Iso8601_duration",
                        "DV_DURATION"
                    ]
                },
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$children": [
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.1.0/Data_types/all-detailed.json#/definitions/DV_DURATION"
            ],
            "$functions": {
                "valid_year": {
                    "description": "True if `y >= 0`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_month": {
                    "description": "True if `m >= 1 and m <= months_in_year`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_day": {
                    "description": "True if `d >= 1 and d <= days_in_month (m, y)`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "d": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y",
                        "m",
                        "d"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_hour": {
                    "description": "True if `(h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)` .",
                    "parameters": {
                        "h": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "h",
                        "m",
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_minute": {
                    "description": "True if `m >= 0 and m < Minutes_in_hour`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_second": {
                    "description": "True if `s >= 0 and s < Seconds_in_minute` .",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_fractional_second": {
                    "description": "True if `fs >= 0.0` and `fs < 1.0` .",
                    "parameters": {
                        "fs": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "fs"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or `\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. `nnW` represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                    "parameters": {
                        "s": {
                            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_partial": {
                    "description": "Returns False.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_extended": {
                    "description": "Returns True.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "years": {
                    "description": "Number of years in the `_value_`, i.e. the number preceding the `'Y'` in the `'YMD'` part, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "months": {
                    "description": "Number of months in the `_value_`, i.e. the value preceding the `'M'` in the `'YMD'` part, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "days": {
                    "description": "Number of days in the `_value_`, i.e. the number preceding the `'D'` in the `'YMD'` part, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "hours": {
                    "description": "Number of hours in the `_value_`, i.e. the number preceding the `'H'` in the `'HMS'` part, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "minutes": {
                    "description": "Number of minutes in the `_value_`, i.e. the number preceding the `'M'` in the `'HMS'` part, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "seconds": {
                    "description": "Number of seconds in the `_value_`, i.e. the integer number preceding the `'S'` in the `'HMS'` part, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "fractional_seconds": {
                    "description": "Fractional seconds in the `_value_`, i.e. the decimal part of the number preceding the `'S'` in the `'HMS'` part, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "weeks": {
                    "description": "Number of weeks in the `_value_`, i.e. the value preceding the `W`, if one exists.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "is_decimal_sign_comma": {
                    "description": "True if this time has a decimal part indicated by ',' (comma) rather than '.' (period).",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "to_seconds": {
                    "description": "Total number of seconds equivalent (including fractional) of entire duration. Where non-definite elements such as year and month (i.e. 'Y' and 'M') are included, the corresponding 'average' durations from `Time_definitions` are used to compute the result.",
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "as_string": {
                    "description": "Return the duration string value.",
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                },
                "add": {
                    "description": "Arithmetic addition of a duration to a duration, via conversion to seconds, using `Time_definitions._Average_days_in_year_` and `Time_definitions._Average_days_in_month_`",
                    "parameters": {
                        "a_val": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_val"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                },
                "subtract": {
                    "description": "Arithmetic subtraction of a duration from a duration, via conversion to seconds, using `Time_definitions._Average_days_in_year_` and `Time_definitions._Average_days_in_month_`",
                    "parameters": {
                        "a_val": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_val"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                },
                "multiply": {
                    "description": "Arithmetic multiplication a duration by a number.",
                    "parameters": {
                        "a_val": {
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "a_val"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                },
                "divide": {
                    "description": "Arithmetic division of a duration by a number.",
                    "parameters": {
                        "a_val": {
                            "$ref": "#/definitions/Real"
                        }
                    },
                    "required_parameters": [
                        "a_val"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                },
                "negative": {
                    "description": "Generate negative of current duration value.",
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                }
            },
            "$invariants": {
                "Post": "Result = fs >= 0.0 and fs < 1.0",
                "Post_result": "Result = (other <= self)",
                "Years_valid": "years >= 0",
                "Months_valid": "months >= 0",
                "Weeks_valid": "weeks >= 0",
                "Days_valid": "days >= 0",
                "Hours_valid": "hours >= 0",
                "Minutes_valid": "minutes >= 0",
                "Seconds_valid": "seconds >= 0",
                "Fractional_second_valid": "fractional_second >= 0.0 and fractional_second < 1.0"
            }
        },
        "Iso8601_time": {
            "title": "Iso8601_time",
            "description": "Represents an ISO 8601 time, including partial and extended forms. Value may be:\n\n* `hh:mm:ss[(,|.)sss][Z|\u00b1hh[:mm]]` (extended, preferred) or\n* `hhmmss[(,|.)sss][Z|\u00b1hh[mm]]` (compact)\n* or a partial invariant.\n\nSee `_valid_iso8601_time()_` for validity.\n\nNOTE: A small deviation to the ISO 8601:2004 standard in this class is that the time `24:00:00` is not allowed, for consistency with `Iso8601_date_time`.",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Iso8601_time",
                        "DV_TIME"
                    ]
                },
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$children": [
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.1.0/Data_types/all-detailed.json#/definitions/DV_TIME"
            ],
            "$functions": {
                "valid_year": {
                    "description": "True if `y >= 0`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_month": {
                    "description": "True if `m >= 1 and m <= months_in_year`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_day": {
                    "description": "True if `d >= 1 and d <= days_in_month (m, y)`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "d": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y",
                        "m",
                        "d"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_hour": {
                    "description": "True if `(h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)` .",
                    "parameters": {
                        "h": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "h",
                        "m",
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_minute": {
                    "description": "True if `m >= 0 and m < Minutes_in_hour`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_second": {
                    "description": "True if `s >= 0 and s < Seconds_in_minute` .",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_fractional_second": {
                    "description": "True if `fs >= 0.0` and `fs < 1.0` .",
                    "parameters": {
                        "fs": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "fs"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or `\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. `nnW` represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                    "parameters": {
                        "s": {
                            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_partial": {
                    "description": "True if this time is partial, i.e. if seconds or more is missing.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_extended": {
                    "description": "True if this time uses `'-'`, `':'` separators.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "hour": {
                    "description": "Extract the hour part of the date/time as an Integer.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "minute": {
                    "description": "Extract the minute part of the time as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "second": {
                    "description": "Extract the integral seconds part of the time (i.e. prior to any decimal sign) as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "fractional_second": {
                    "description": "Extract the fractional seconds part of the time (i.e. following to any decimal sign) as a Real, or return 0.0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Real"
                    }
                },
                "timezone": {
                    "description": "Timezone; may be Void.",
                    "return": {
                        "$ref": "#/definitions/Iso8601_timezone"
                    }
                },
                "minute_unknown": {
                    "description": "Indicates whether minute is unknown. If so, the time is of the form \u201chh\u201d.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "second_unknown": {
                    "description": "Indicates whether second is unknown. If so and month is known, the time is of the form `\"hh:mm\"` or `\"hhmm\"`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_decimal_sign_comma": {
                    "description": "True if this time has a decimal part indicated by `','` (comma) rather than `'.'` (period).",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "has_fractional_second": {
                    "description": "True if the `_fractional_second_` part is significant (i.e. even if = 0.0).",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "as_string": {
                    "description": "Return string value in extended format.",
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                },
                "add": {
                    "description": "Arithmetic addition of a duration to a time.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_time"
                    }
                },
                "subtract": {
                    "description": "Arithmetic subtraction of a duration from a time.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_time"
                    }
                },
                "diff": {
                    "description": "Difference of two times.",
                    "parameters": {
                        "a_time": {
                            "$ref": "#/definitions/Iso8601_time"
                        }
                    },
                    "required_parameters": [
                        "a_time"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                }
            },
            "$invariants": {
                "Post": "Result = fs >= 0.0 and fs < 1.0",
                "Post_result": "Result = (other <= self)",
                "Hour_valid": "valid_hour(hour, minute, second)",
                "Minute_valid": "not minute_unknown implies valid_minute (minute)",
                "Second_valid": "not second_unknown implies valid_second (second)",
                "Fractional_second_valid": "has_fractional_second implies (not second_unknown and valid_fractional_second (fractional_second))",
                "Partial_validity": "minute_unknown implies second_unknown",
                "Pre": "not second_unknown"
            }
        },
        "Iso8601_timezone": {
            "title": "Iso8601_timezone",
            "description": "ISO8601 timezone string, in format:\n\n* `Z | \u00b1hh[mm]`\n\nwhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "object",
            "properties": {
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "valid_year": {
                    "description": "True if `y >= 0`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_month": {
                    "description": "True if `m >= 1 and m <= months_in_year`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_day": {
                    "description": "True if `d >= 1 and d <= days_in_month (m, y)`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "d": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y",
                        "m",
                        "d"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_hour": {
                    "description": "True if `(h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)` .",
                    "parameters": {
                        "h": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "h",
                        "m",
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_minute": {
                    "description": "True if `m >= 0 and m < Minutes_in_hour`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_second": {
                    "description": "True if `s >= 0 and s < Seconds_in_minute` .",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_fractional_second": {
                    "description": "True if `fs >= 0.0` and `fs < 1.0` .",
                    "parameters": {
                        "fs": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "fs"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or `\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. `nnW` represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                    "parameters": {
                        "s": {
                            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_partial": {
                    "description": "True if this time zone is partial, i.e. if minutes is missing.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_extended": {
                    "description": "True if this time-zone uses \u2018:\u2019 separators.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "hour": {
                    "description": "Extract the hour part of timezone, as an Integer in the range `00 - 14`.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "minute": {
                    "description": "Extract the hour part of timezone, as an Integer, usually either 0 or 30.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "sign": {
                    "description": "Direction of timezone expresssed as +1 or -1.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "minute_unknown": {
                    "description": "Indicates whether minute part known.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_gmt": {
                    "description": "True if timezone is UTC, i.e. `+0000`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "as_string": {
                    "description": "Return timezone string in extended format.",
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                }
            },
            "$invariants": {
                "Post": "Result = fs >= 0.0 and fs < 1.0",
                "Post_result": "Result = (other <= self)",
                "Min_hour_valid": "sign = -1 implies hour > 0 and hour <= Min_timezone_hour",
                "Max_hour_valid": "sign = 1 implies hour > 0 and hour <= Max_timezone_hour",
                "Minute_valid": "not minute_unknown implies valid_minute (minute)",
                "Sign_valid": "sign = 1 or sign = -1"
            }
        },
        "Iso8601_type": {
            "title": "Iso8601_type",
            "description": "Abstract ancestor type of ISO 8601 types, defining interface for 'extended' and 'partial' concepts from ISO 8601.",
            "$comments": "Defined in Foundation_types IM, abstract, inherits from Temporal, Time_Definitions",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Iso8601_date_time",
                        "Iso8601_duration",
                        "Iso8601_time",
                        "Iso8601_timezone",
                        "Iso8601_date",
                        "DV_DATE_TIME",
                        "DV_DURATION",
                        "DV_TIME",
                        "DV_DATE"
                    ]
                },
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "_type",
                "value"
            ],
            "$abstract": true,
            "$inherits": [
                "#/definitions/Temporal",
                "#/definitions/Time_Definitions"
            ],
            "$children": [
                "#/definitions/Iso8601_date_time",
                "#/definitions/Iso8601_duration",
                "#/definitions/Iso8601_time",
                "#/definitions/Iso8601_timezone",
                "#/definitions/Iso8601_date"
            ],
            "$functions": {
                "valid_year": {
                    "description": "True if `y >= 0`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_month": {
                    "description": "True if `m >= 1 and m <= months_in_year`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_day": {
                    "description": "True if `d >= 1 and d <= days_in_month (m, y)`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "d": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y",
                        "m",
                        "d"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_hour": {
                    "description": "True if `(h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)` .",
                    "parameters": {
                        "h": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "h",
                        "m",
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_minute": {
                    "description": "True if `m >= 0 and m < Minutes_in_hour`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_second": {
                    "description": "True if `s >= 0 and s < Seconds_in_minute` .",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_fractional_second": {
                    "description": "True if `fs >= 0.0` and `fs < 1.0` .",
                    "parameters": {
                        "fs": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "fs"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or `\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. `nnW` represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                    "parameters": {
                        "s": {
                            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_partial": {
                    "description": "True if this date time is partial, i.e. if trailing end (right hand) value(s) is/are missing.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_extended": {
                    "description": "True if this ISO8601 string is in the 'extended' form, i.e. uses `'-'` and / or `':'` separators. This is the preferred format.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post": "Result = fs >= 0.0 and fs < 1.0",
                "Post_result": "Result = (other <= self)"
            }
        },
        "Iso8601_date": {
            "title": "Iso8601_date",
            "description": "Represents an ISO 8601 date, including partial and extended forms. Value may be:\n\n* `YYYY-MM-DD` (extended, preferred)\n* `YYYYMMDD` (compact)\n* a partial invariant.\n\nSee `Time_definitions._valid_iso8601_date()_` for validity.",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Iso8601_date",
                        "DV_DATE"
                    ]
                },
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$children": [
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.1.0/Data_types/all-detailed.json#/definitions/DV_DATE"
            ],
            "$functions": {
                "valid_year": {
                    "description": "True if `y >= 0`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_month": {
                    "description": "True if `m >= 1 and m <= months_in_year`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_day": {
                    "description": "True if `d >= 1 and d <= days_in_month (m, y)`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "d": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y",
                        "m",
                        "d"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_hour": {
                    "description": "True if `(h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)` .",
                    "parameters": {
                        "h": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "h",
                        "m",
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_minute": {
                    "description": "True if `m >= 0 and m < Minutes_in_hour`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_second": {
                    "description": "True if `s >= 0 and s < Seconds_in_minute` .",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_fractional_second": {
                    "description": "True if `fs >= 0.0` and `fs < 1.0` .",
                    "parameters": {
                        "fs": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "fs"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or `\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. `nnW` represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                    "parameters": {
                        "s": {
                            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_partial": {
                    "description": "True if this date is partial, i.e. if days or more is missing.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_extended": {
                    "description": "True if this date uses `'-'` separators.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "year": {
                    "description": "Extract the year part of the date as an Integer.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "month": {
                    "description": "Extract the month part of the date as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "day": {
                    "description": "Extract the day part of the date as an Integer, or return 0 if not present.",
                    "return": {
                        "$ref": "#/definitions/Integer"
                    }
                },
                "timezone": {
                    "description": "Timezone; may be Void.",
                    "return": {
                        "$ref": "#/definitions/Iso8601_timezone"
                    }
                },
                "month_unknown": {
                    "description": "Indicates whether month in year is unknown. If so, the date is of the form `\"YYYY\"`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "day_unknown": {
                    "description": "Indicates whether day in month is unknown. If so, and month is known, the date is of the form `\"YYYY-MM\"` or `\"YYYYMM\"`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "as_string": {
                    "description": "Return string value in extended format.",
                    "return": {
                        "$ref": "#/definitions/String"
                    }
                },
                "add": {
                    "description": "Arithmetic addition of a duration to a date.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date"
                    }
                },
                "subtract": {
                    "description": "Arithmetic subtraction of a duration from a date.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date"
                    }
                },
                "diff": {
                    "description": "Difference of two dates.",
                    "parameters": {
                        "a_date": {
                            "$ref": "#/definitions/Iso8601_date"
                        }
                    },
                    "required_parameters": [
                        "a_date"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_duration"
                    }
                },
                "add_nominal": {
                    "description": "Addition of nominal duration represented by `_a_diff_`. For example, a duration of `'P1Y'` means advance to the same date next year, with the exception of the date 29 February in a leap year, to which the addition of a nominal year will result in 28 February of the following year. Similarly, `'P1M'` is understood here as a nominal month, the addition of which will result in one of:\n\n* the same day in the following month, if it exists, or;\n* one or two days less where the following month is shorter, or;\n* in the case of adding a month to the date 31 Jan, the result will be 28 Feb in a non-leap year (i.e. three less) and 29 Feb in a leap year (i.e. two less).",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date"
                    }
                },
                "subtract_nominal": {
                    "description": "Subtraction of nominal duration represented by `_a_diff_`. See `_add_nominal_()` for semantics.",
                    "parameters": {
                        "a_diff": {
                            "$ref": "#/definitions/Iso8601_duration"
                        }
                    },
                    "required_parameters": [
                        "a_diff"
                    ],
                    "return": {
                        "$ref": "#/definitions/Iso8601_date"
                    }
                }
            },
            "$invariants": {
                "Post": "Result = fs >= 0.0 and fs < 1.0",
                "Post_result": "Result = (other <= self)",
                "Year_valid": "valid_year (year)",
                "Month_valid": "not month_unknown implies valid_month (month)",
                "Day_valid": "not day_unknown implies valid_day (year, month, day)",
                "Partial_validity": "month_unknown implies day_unknown",
                "Pre": "not day_unknown"
            }
        },
        "Interval<Iso8601_date>": {
            "title": "Interval<Iso8601_date>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Iso8601_date"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Iso8601_date"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Proper_interval<Iso8601_date>": {
            "title": "Proper_interval<Iso8601_date>",
            "$comments": "Defined in Foundation_types IM, inherits from Proper_interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Iso8601_date"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Iso8601_date"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Proper_interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)",
                "Inv_not_point": "lower /= upper"
            }
        },
        "Point_interval<Iso8601_date>": {
            "title": "Point_interval<Iso8601_date>",
            "$comments": "Defined in Foundation_types IM, inherits from Point_interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Iso8601_date"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Iso8601_date"
                },
                "lower_unbounded": {
                    "description": "Lower boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean",
                    "default": false
                },
                "upper_unbounded": {
                    "description": "Upper boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean",
                    "default": false
                },
                "lower_included": {
                    "description": "Lower boundary value included in range if not `_lower_unbounded_`.",
                    "$ref": "#/definitions/Boolean",
                    "default": true
                },
                "upper_included": {
                    "description": "Upper boundary value included in range if not `_upper_unbounded_`.",
                    "$ref": "#/definitions/Boolean",
                    "default": true
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Point_interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)",
                "Inv_point": "lower = upper"
            }
        },
        "Interval<Iso8601_time>": {
            "title": "Interval<Iso8601_time>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Iso8601_time"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Iso8601_time"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Interval<Iso8601_date_time>": {
            "title": "Interval<Iso8601_date_time>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Iso8601_date_time"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Iso8601_date_time"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Interval<Iso8601_duration>": {
            "title": "Interval<Iso8601_duration>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Iso8601_duration"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Iso8601_duration"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Time_Definitions": {
            "title": "Time_Definitions",
            "description": "Definitions for date/time classes. Note that the timezone limits are set by where the international dateline is. Thus, time in New Zealand is quoted using `+12:00`, not `-12:00`.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Time_Definitions",
                        "Iso8601_date_time",
                        "Iso8601_duration",
                        "Iso8601_time",
                        "Iso8601_timezone",
                        "Iso8601_date",
                        "DV_DATE_TIME",
                        "DV_DURATION",
                        "DV_TIME",
                        "DV_DATE"
                    ]
                }
            },
            "$children": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "valid_year": {
                    "description": "True if `y >= 0`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_month": {
                    "description": "True if `m >= 1 and m <= months_in_year`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_day": {
                    "description": "True if `d >= 1 and d <= days_in_month (m, y)`.",
                    "parameters": {
                        "y": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "d": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "y",
                        "m",
                        "d"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_hour": {
                    "description": "True if `(h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)` .",
                    "parameters": {
                        "h": {
                            "$ref": "#/definitions/Integer"
                        },
                        "m": {
                            "$ref": "#/definitions/Integer"
                        },
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "h",
                        "m",
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_minute": {
                    "description": "True if `m >= 0 and m < Minutes_in_hour`.",
                    "parameters": {
                        "m": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "m"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_second": {
                    "description": "True if `s >= 0 and s < Seconds_in_minute` .",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/Integer"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_fractional_second": {
                    "description": "True if `fs >= 0.0` and `fs < 1.0` .",
                    "parameters": {
                        "fs": {
                            "$ref": "#/definitions/Double"
                        }
                    },
                    "required_parameters": [
                        "fs"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or `\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
                    "parameters": {
                        "s": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. `nnW` represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                    "parameters": {
                        "s": {
                            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
                            "$ref": "#/definitions/String"
                        }
                    },
                    "required_parameters": [
                        "s"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post": "Result = fs >= 0.0 and fs < 1.0"
            }
        },
        "Temporal": {
            "title": "Temporal",
            "description": "Abstract ancestor of time-related classes.",
            "$comments": "Defined in Foundation_types IM, abstract, inherits from Ordered",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Iso8601_date_time",
                        "Iso8601_duration",
                        "Iso8601_time",
                        "Iso8601_timezone",
                        "Iso8601_date",
                        "DV_DATE_TIME",
                        "DV_DURATION",
                        "DV_TIME",
                        "DV_DATE"
                    ]
                }
            },
            "required": [
                "_type"
            ],
            "$abstract": true,
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$children": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "less_than": {
                    "description": "Arithmetic value comparison. Returns True if current object is less than `_other_`. This operator is effected and/or redefined in descendants to provide the appropriate ordering semantics for concrete types.\n\nIn conjunction with `=`, enables the definition of the related functions `_greater_than_()` etc.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "less_than_or_equal": {
                    "description": "True if current object less than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than": {
                    "description": "True if current object greater than `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "greater_than_or_equal": {
                    "description": "True if current object greater than or equal to `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Ordered"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Post_result": "Result = (other <= self)"
            }
        },
        "Multiplicity_interval": {
            "title": "Multiplicity_interval",
            "description": "An Interval of Integer, used to represent multiplicity, cardinality and optionality in models. ",
            "$comments": "Defined in Foundation_types IM, inherits from Proper_interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Integer"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Integer"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Proper_interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_open": {
                    "description": "True if this interval imposes no constraints, i.e. is set to `0..*`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_optional": {
                    "description": "True if this interval expresses optionality, i.e. `0..1`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_mandatory": {
                    "description": "True if this interval expresses mandation, i.e. `1..1`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_prohibited": {
                    "description": "True if this interval is set to `0..0`.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)",
                "Inv_not_point": "lower /= upper"
            }
        },
        "Proper_interval": {
            "title": "Proper_interval",
            "description": "Type representing a 'proper' Interval, i.e. any two-sided or one-sided interval.",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Proper_interval",
                        "Proper_interval<Iso8601_date>",
                        "Multiplicity_interval"
                    ]
                },
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/T"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$children": [
                "#/definitions/Proper_interval_of_Iso8601_date",
                "#/definitions/Multiplicity_interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)",
                "Inv_not_point": "lower /= upper"
            }
        },
        "Interval": {
            "title": "Interval",
            "description": "Interval abstraction, featuring upper and lower limits that may be open or closed, included or not included.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "DV_INTERVAL",
                        "Interval<Iso8601_date>",
                        "Interval<Iso8601_time>",
                        "Interval<Iso8601_date_time>",
                        "Interval<Iso8601_duration>",
                        "Proper_interval",
                        "Point_interval",
                        "Interval<Real>",
                        "Interval<Integer>",
                        "Interval<T>",
                        "DV_INTERVAL<DV_DATE_TIME>",
                        "DV_INTERVAL<DV_DATE>",
                        "DV_INTERVAL<DV_QUANTITY>",
                        "DV_INTERVAL<DV_COUNT>",
                        "DV_INTERVAL<DV_PROPORTION>",
                        "Proper_interval<Iso8601_date>",
                        "Multiplicity_interval",
                        "Point_interval<Iso8601_date>"
                    ]
                },
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/T"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "_type",
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$abstract": true,
            "$children": [
                "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.1.0/Data_types/all-detailed.json#/definitions/DV_INTERVAL",
                "#/definitions/Interval_of_Iso8601_date",
                "#/definitions/Interval_of_Iso8601_time",
                "#/definitions/Interval_of_Iso8601_date_time",
                "#/definitions/Interval_of_Iso8601_duration",
                "#/definitions/Proper_interval",
                "#/definitions/Point_interval",
                "#/definitions/Interval_of_Real",
                "#/definitions/Interval_of_Integer",
                "#/definitions/Interval_of_T"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Point_interval": {
            "title": "Point_interval",
            "description": "Type representing an Interval that happens to be a point value. Provides an efficient representation that is substitutable for `Interval<T>` where needed.",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "_type": {
                    "enum": [
                        "Point_interval",
                        "Point_interval<Iso8601_date>"
                    ]
                },
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/T"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "Lower boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean",
                    "default": false
                },
                "upper_unbounded": {
                    "description": "Upper boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean",
                    "default": false
                },
                "lower_included": {
                    "description": "Lower boundary value included in range if not `_lower_unbounded_`.",
                    "$ref": "#/definitions/Boolean",
                    "default": true
                },
                "upper_included": {
                    "description": "Upper boundary value included in range if not `_upper_unbounded_`.",
                    "$ref": "#/definitions/Boolean",
                    "default": true
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$children": [
                "#/definitions/Point_interval_of_Iso8601_date"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)",
                "Inv_point": "lower = upper"
            }
        },
        "Cardinality": {
            "title": "Cardinality",
            "description": "Express constraints on the cardinality of container objects which are the values of multiply-valued attributes, including uniqueness and ordering, providing the means to state that a container acts like a logical list, set or bag.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "properties": {
                "interval": {
                    "description": "The interval of this cardinality. ",
                    "$ref": "#/definitions/Multiplicity_interval"
                },
                "is_ordered": {
                    "description": "True if the members of the container attribute to which this cardinality refers are ordered. ",
                    "$ref": "#/definitions/Boolean"
                },
                "is_unique": {
                    "description": "True if the members of the container attribute to which this cardinality refers are unique.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "interval",
                "is_ordered",
                "is_unique"
            ],
            "$functions": {
                "is_bag": {
                    "description": "True if the semantics of this cardinality represent a bag, i.e. unordered, non-unique membership.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_list": {
                    "description": "True if the semantics of this cardinality represent a list, i.e. ordered, non-unique membership.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_set": {
                    "description": "True if the semantics of this cardinality represent a set, i.e. unordered, unique membership.",
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            }
        },
        "Interval<Real>": {
            "title": "Interval<Real>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Real"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Real"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Interval<Integer>": {
            "title": "Interval<Integer>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/Integer"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/Integer"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Interval<T>": {
            "title": "Interval<T>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "Lower bound.",
                    "$ref": "#/definitions/T"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "`lower` boundary open (i.e. = -infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "`upper` boundary open (i.e. = +infinity).",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "`lower` boundary value included in range if not `lower_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "`upper` boundary value included in range if not `upper_unbounded`.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if the value `e` is properly contained in this Interval.",
                    "parameters": {
                        "e": {
                            "$ref": "#/definitions/T"
                        }
                    },
                    "required_parameters": [
                        "e"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `_other_`. True if at least one limit of other is strictly inside the limits of this interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "contains": {
                    "description": "True if current interval properly contains `_other_`? True if all points of `_other_` are inside the current interval.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Interval"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `_other_`.",
                    "parameters": {
                        "other": {
                            "$ref": "#/definitions/Any"
                        }
                    },
                    "required_parameters": [
                        "other"
                    ],
                    "return": {
                        "$ref": "#/definitions/Boolean"
                    }
                }
            },
            "$invariants": {
                "Lower_included_valid": "lower_unbounded implies not lower_included",
                "Upper_included_valid": "upper_unbounded implies not upper_included",
                "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
                "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
                "Post_result": "Result = (lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)"
            }
        },
        "Terminology_code": {
            "title": "Terminology_code",
            "description": "Primitive type representing a standalone reference to a terminology concept, in the form of a terminology identifier, optional version, and a code or code string from the terminology.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "properties": {
                "terminology_id": {
                    "description": "The archetype environment namespace identifier used to identify a terminology. Typically a value like `\"snomed_ct\"` that is mapped elsewhere to the full URI identifying the terminology.",
                    "$ref": "#/definitions/String"
                },
                "terminology_version": {
                    "description": "Optional string value representing terminology version, typically a date or dotted numeric.",
                    "$ref": "#/definitions/String"
                },
                "code_string": {
                    "description": "A terminology code or post-coordinated code expression, if supported by the terminology. The code may refer to a single term, a value set consisting of multiple terms, or some other entity representable within the terminology.",
                    "$ref": "#/definitions/String"
                },
                "uri": {
                    "description": "The URI reference that may be used as a concrete key into a notional terminology service for queries that can obtain the term text, definition, and other associated elements.",
                    "$ref": "#/definitions/Uri"
                }
            },
            "required": [
                "terminology_id",
                "code_string"
            ]
        },
        "Terminology_term": {
            "title": "Terminology_term",
            "description": "Leaf type representing a standalone term from a terminology, which consists of the term text and the code, i.e. a concept reference.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "properties": {
                "concept": {
                    "description": "Reference to the terminology concept formally representing this term.",
                    "$ref": "#/definitions/Terminology_code"
                },
                "text": {
                    "description": "Text of term.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "concept",
                "text"
            ]
        }
    },
    "$component": "BASE",
    "$version": "Release-1.2.0"
}